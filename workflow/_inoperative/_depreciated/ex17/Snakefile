"""
See protocol.md for a description of the experiment procedure.
"""
# ======================================================================
# ========== SET-UP ==========
# ----- Python utility -----
from datetime import datetime
from itertools import product
import numpy as np

# ----- Configuration -----
configfile: "config.yaml"
experiment = "ex17"

# Parameters
_params = config[experiment]["parameters"]
PFIS = np.linspace(**_params["pfis"])
METRICS = _params["metrics"]

_params = _params["embedding"]
METHODS = _params["method"]
WALKLENGTHS = np.linspace(**_params["walk_length"])
NUMWALKS = _params["num_walks"]
DIMENSIONS = np.geomspace(**_params["dimensions"])

# Globals
DATE = datetime.today().strftime("%Y%m%d")
ROOT = "../.."
TAG = "{project_id}{current_version}_{researcher}".format(**config[experiment]["metadata"])

# Aliases
_directories = config["global"]["directories"]
_files = config["global"]["files"]

_input_raw = _directories["input"]["raw"].format(root=ROOT)
_input_preprocessed = _directories["input"]["preprocessed"].format(root=ROOT)
_output_raw = _directories["output"]["raw"].format(root=ROOT)
_output_processed = _directories["output"]["processed"].format(root=ROOT)
_dataframes = _directories["results"]["dataframes"].format(root=ROOT)
_figures = _directories["results"]["dataframes"].format(root=ROOT)
_reports = _directories["results"]["dataframes"].format(root=ROOT)



# =========== WORKFLOW ===========
# ----- All rule ----
rule all:
    input:
        # temp input
        expand(
            _files["reconstructions"].format(out_pcsd_dir=_output_processed, tag=TAG),
            system=SYSTEMS,
            method=METHODS,
            walk_length=WALKLENGTHS,
            num_walks=NUMWALKS,
            dimensions=DIMENSIONS,
            metric=METRICS
        )

        # Dataframe
        # DAG
        # figures


# ----- Analysis rules -----



# ----- Simulation rules ------
# Step (1)
rule observe_remnants:
    input:
        preprocessed_multiplex = 
    output:
        expand(
            _files["observations"].format(in_pcsd_dir=_input_preprocessed, tag=TAG),
            pfi=PFIS
        )
    script:
        "scripts/observe_remnants.py"


# Step (2)
rule embed:
    input:
        observations = _files["observations"].format(in_pcsd_dir=_input_preprocessed, tag=TAG)
    output:
        embeddings = _files["embeddings"].format(out_raw_dir=_output_raw, tag=TAG)
    script:
        "scripts/embed_remnants.py"

# Step (3)
rule calculate_distances:
    input:
        embeddings = _files["embeddings"].format(out_raw_dir=_output_raw, tag=TAG)
    output:
        distances = _files["distances"].format(out_raw_dir=_output_raw, tag=TAG)
    script:
        "scripts/calculate_distances.py"

# Step (4)
rule reconstruct_multiplex:
    input:
        distances = _files["distances"].format(out_raw_dir=_output_raw, tag=TAG)
    output:
        reconstructions = _files["reconstructions"].format(out_pcsd_dir=_output_processed, tag=TAG)
    script:
        "scripts/reconstruct_multiplex.py"