# >>>> Snakefile 'README' >>>>
# >> General information >>
# Yep
# << General information <<
# >> Workflow Outline >>
# Yep
# << Workflow Outline <<
# <<<< Snakefile 'README' <<<<
# ======================================================================
# ======== IMPORTS/PYTHON PRE-CONFIG ==========
from datetime import datetime
from itertools import product

# ======== CONFIG =========
configfile: "config.yaml"

# Aliases
_meta = config["meta"]
_network = config["network"]
_params = config["experiment"]["params"]
_hyperparams = config["experiment"]["hyperparams"]
_pathing = config["workflow"]["pathing"]
_datafiles = config["workflow"]["datafiles"]

# Globals
DATE = datetime.today().strftime("%Y%m%d")
ROOT = "../.."
REPETITIONS = range(1, int(_params["repetitions"])+1)

# =========== WORKFLOW ===========
# ----- All rule ----
rule all:
    input:
        # Dataframe
        _datafiles["output"]["dataframe"].format(
            dir=_pathing["output"]["dataframe"].format(root=ROOT),
            project_id=_meta["project_id"], current_version=_meta["current_version"],
            researcher=_meta["researcher"],
            date=DATE
        ),
        # Snakemake report
        # _datafiles["output"]["report"].format(
        #     dir=_pathing["output"]["reports"].format(root=ROOT),
        #     project_id=_meta["project_id"], current_version=_meta["current_version"],
        #     researcher=_meta["researcher"],
        #     date=DATE
        # ),
        # DAG
        _datafiles["output"]["dag"].format(
            dir=_pathing["output"]["reports"].format(root=ROOT),
            project_id=_meta["project_id"], current_version=_meta["current_version"],
            researcher=_meta["researcher"],
            date=DATE
        )

# ----- Analysis rules -----
# - Meta analysis -
rule meta_report:
    output:
        _datafiles["output"]["report"].format(
            dir=_pathing["output"]["reports"].format(root=ROOT),
            project_id=_meta["project_id"], current_version=_meta["current_version"],
            researcher=_meta["researcher"],
            date=DATE
        )
    shell:
        "snakemake --report {output}"

rule meta_dag:
    output:
        _datafiles["output"]["dag"].format(
            dir=_pathing["output"]["reports"].format(root=ROOT),
            project_id=_meta["project_id"], current_version=_meta["current_version"],
            researcher=_meta["researcher"],
            date=DATE
        )
    shell:
        "snakemake --dag | dot -Tsvg > {output}"

# - Data analysis -
rule aggregate_records:
    input:
        [
            expand(
                _datafiles["intermediary"]["record"].format(dir=_pathing["temp"].format(root=ROOT)),
                system=system_,
                alpha=_network[system_]["alpha"],
                beta=_network[system_]["beta"],
                metric=_params["metrics"],
                pfi=_params["pfis"],
                rep=REPETITIONS,
            )
            for system_ in _network.keys()
        ]
    output:
        _datafiles["output"]["dataframe"].format(
            dir=_pathing["output"]["dataframe"].format(root=ROOT),
            project_id=_meta["project_id"], current_version=_meta["current_version"],
            researcher=_meta["researcher"],
            date=DATE
        )
    script:
        _pathing["scripts"] + "aggregate_records.py"

rule measure_performance:
    input:
        reconstruction = _datafiles["intermediary"]["reconstruction"].format(
            dir=_pathing["temp"].format(root=ROOT)
        )
    output:
        _datafiles["intermediary"]["record"].format(
            dir=_pathing["temp"].format(root=ROOT)
        )
    script:
        _pathing["scripts"] + "measure_performance.py"

rule generate_plots:
    input:
        dataframe = _datafiles["output"]["dataframe"].format(
            dir=_pathing["output"]["dataframe"].format(root=ROOT),
            project_id=_meta["project_id"], current_version=_meta["current_version"],
            researcher=_meta["researcher"],
            date=DATE
        )
    output:   # * CAN WE AUTO GENERATE MORE? :/
        scatter = _datafiles["output"]["figures"]["scatter"].format(
            dir=_pathing["output"]["figures"].format(root=ROOT),
            project_id=_meta["project_id"], current_version=_meta["current_version"],
            researcher=_meta["researcher"],
            date=DATE
        )
    script:
        _pathing["scripts"] + "generate_plots.py"


# ----- Computation rules -----
rule observe_subtensor:
    input:
        duplex_edgelist = _datafiles["input"]["duplex"].format(
            dir=_pathing["input"]["raw"].format(root=ROOT)
        )
    output:
        _datafiles["intermediary"]["observation"].format(
            dir=_pathing["temp"].format(root=ROOT)
        )
    params:
        alpha = "{alpha}",
        beta = "{beta}",
        pfi = "{pfi}",
        rep = "{rep}"
    script:
        _pathing["scripts"] + "observe_subtensor.py"

rule calculate_remnant_spectra:
    input:
        observation = _datafiles["intermediary"]["observation"].format(
            dir=_pathing["temp"].format(root=ROOT)
        )
    output:
        _datafiles["intermediary"]["spectra"].format(
            dir=_pathing["temp"].format(root=ROOT)
        )
    params:
        num_values = _hyperparams["spectra"]["num_values"]
    script:
        _pathing["scripts"] + "calculate_remnant_spectra.py"


rule calculate_distances:
    input:
        spectra = _datafiles["intermediary"]["spectra"].format(
            dir=_pathing["temp"].format(root=ROOT)
        ),
        observation = _datafiles["intermediary"]["observation"].format(
            dir=_pathing["temp"].format(root=ROOT)
        )
    output:
        _datafiles["intermediary"]["distances"].format(
            dir=_pathing["temp"].format(root=ROOT)
        )
    script:
        _pathing["scripts"] + "calculate_distances.py"


rule reconstruct_tensor:
    input:
        distances = _datafiles["intermediary"]["distances"].format(
            dir=_pathing["temp"].format(root=ROOT)
        ),
        observation = _datafiles["intermediary"]["observation"].format(
            dir=_pathing["temp"].format(root=ROOT)
        )
    output:
        _datafiles["intermediary"]["reconstruction"].format(
            dir=_pathing["temp"].format(root=ROOT)
        )
    params:
        metric = "{metric}"
    script:
        _pathing["scripts"] + "reconstruct_tensor.py"
