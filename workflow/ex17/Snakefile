"""
See protocol.md for a description of the experiment procedure.
"""
# ======================================================================
# ========== SET-UP ==========
# ----- Python utility -----
from datetime import datetime
from itertools import product
import numpy as np

# ----- Configuration -----
configfile: "config.yaml"
experiment = "ex17"

# Parameters
PFIS = np.linspace(
    start=config[experiment]["parameters"]["pfis"]["start"],
    stop=config[experiment]["parameters"]["pfis"]["stop"],
    step=config[experiment]["parameters"]["pfis"]["step"],
    endpoint=True
)

# Globals
DATE = datetime.today().strftime("%Y%m%d")
ROOT = "../.."
TAG = "{project_id}{current_version}_{researcher}".format(**config[experiment]["metadata"])

# Aliases
_input_raw = config["global"]["directories"]["input"]["raw"].format(root=ROOT)
_input_preprocessed = config["global"]["directories"]["input"]["preprocessed"].format(root=ROOT)
_output_raw = config["global"]["directories"]["output"]["raw"].format(root=ROOT)
_output_processed = config["global"]["directories"]["output"]["processed"].format(root=ROOT)
_dataframes = config["global"]["directories"]["results"]["dataframes"].format(root=ROOT)
_figures = config["global"]["directories"]["results"]["dataframes"].format(root=ROOT)
_reports = config["global"]["directories"]["results"]["dataframes"].format(root=ROOT)



# =========== WORKFLOW ===========
# ----- All rule ----
rule all:
    input:
        # Dataframe
        _datafiles["result"]["dataframe"].format(
            dir=_pathing["result"]["dataframe"].format(root=ROOT),
            project_id=_meta["project_id"], current_version=_meta["current_version"],
            researcher=_meta["researcher"],
            date=DATE
        ),
        # DAG
        _datafiles["result"]["dag"].format(
            dir=_pathing["result"]["reports"].format(root=ROOT),
            project_id=_meta["project_id"], current_version=_meta["current_version"],
            researcher=_meta["researcher"],
            date=DATE
        )


# ----- Analysis rules -----



# ----- Simulation rules ------
# Step (1)
rule observe_remnants:
    input:
        preprocessed_multiplex = # TODO: Fill in input files
    output:
        expand(
            config["global"]["directories"]["files"]["observations"].format(in_pcsd_dir=_input_preprocessed, tag=TAG),
            pfi=PFIS
        )
    script:
        "scripts/observe_remnants.py"


# Step (2)
rule embed:
    input:
        observations = config["global"]["directories"]["files"]["observations"].format(in_pcsd_dir=_input_preprocessed, tag=TAG)\
    output:
        embeddings = config["global"]["directories"]["files"]["embeddings"].format(in_pcsd_dir=_input_preprocessed, tag=TAG)